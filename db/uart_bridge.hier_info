|uart_bridge
CLOCK_50 => CLOCK_50.IN1
KEY[0] => key_sync[0].DATAIN
KEY[1] => key_sync[1].DATAIN
KEY[2] => ~NO_FANOUT~
KEY[3] => ~NO_FANOUT~
SW[0] => SW[0].IN1
SW[1] => ~NO_FANOUT~
SW[2] => ~NO_FANOUT~
SW[3] => ~NO_FANOUT~
SW[4] => ~NO_FANOUT~
SW[5] => ~NO_FANOUT~
SW[6] => ~NO_FANOUT~
SW[7] => ~NO_FANOUT~
SW[8] => ~NO_FANOUT~
SW[9] => ~NO_FANOUT~
SW[10] => ~NO_FANOUT~
SW[11] => ~NO_FANOUT~
SW[12] => ~NO_FANOUT~
SW[13] => ~NO_FANOUT~
SW[14] => ~NO_FANOUT~
SW[15] => ~NO_FANOUT~
SW[16] => ~NO_FANOUT~
SW[17] => ~NO_FANOUT~
UART_RXD => uart:DUT.rx_datastream
UART_TXD <= uart:DUT.tx_datastream
LEDG[0] <= uart:DUT.rx_overrun
LEDG[1] <= uart:DUT.rx_framing_err
LEDG[2] <= <GND>
LEDG[3] <= <GND>
LEDG[4] <= <GND>
LEDG[5] <= <GND>
LEDG[6] <= <GND>
LEDG[7] <= <GND>


|uart_bridge|pll:myPLL
areset => areset.IN1
inclk0 => sub_wire3[0].IN1
c0 <= altpll:altpll_component.clk


|uart_bridge|pll:myPLL|altpll:altpll_component
inclk[0] => pll_altpll:auto_generated.inclk[0]
inclk[1] => pll_altpll:auto_generated.inclk[1]
fbin => ~NO_FANOUT~
pllena => ~NO_FANOUT~
clkswitch => ~NO_FANOUT~
areset => pll_altpll:auto_generated.areset
pfdena => ~NO_FANOUT~
clkena[0] => ~NO_FANOUT~
clkena[1] => ~NO_FANOUT~
clkena[2] => ~NO_FANOUT~
clkena[3] => ~NO_FANOUT~
clkena[4] => ~NO_FANOUT~
clkena[5] => ~NO_FANOUT~
extclkena[0] => ~NO_FANOUT~
extclkena[1] => ~NO_FANOUT~
extclkena[2] => ~NO_FANOUT~
extclkena[3] => ~NO_FANOUT~
scanclk => ~NO_FANOUT~
scanclkena => ~NO_FANOUT~
scanaclr => ~NO_FANOUT~
scanread => ~NO_FANOUT~
scanwrite => ~NO_FANOUT~
scandata => ~NO_FANOUT~
phasecounterselect[0] => ~NO_FANOUT~
phasecounterselect[1] => ~NO_FANOUT~
phasecounterselect[2] => ~NO_FANOUT~
phasecounterselect[3] => ~NO_FANOUT~
phaseupdown => ~NO_FANOUT~
phasestep => ~NO_FANOUT~
configupdate => ~NO_FANOUT~
fbmimicbidir <> <GND>
clk[0] <= clk[0].DB_MAX_OUTPUT_PORT_TYPE
clk[1] <= clk[1].DB_MAX_OUTPUT_PORT_TYPE
clk[2] <= clk[2].DB_MAX_OUTPUT_PORT_TYPE
clk[3] <= clk[3].DB_MAX_OUTPUT_PORT_TYPE
clk[4] <= clk[4].DB_MAX_OUTPUT_PORT_TYPE
extclk[0] <= <GND>
extclk[1] <= <GND>
extclk[2] <= <GND>
extclk[3] <= <GND>
clkbad[0] <= <GND>
clkbad[1] <= <GND>
enable1 <= <GND>
enable0 <= <GND>
activeclock <= <GND>
clkloss <= <GND>
locked <= <GND>
scandataout <= <GND>
scandone <= <GND>
sclkout0 <= <GND>
sclkout1 <= <GND>
phasedone <= <GND>
vcooverrange <= <GND>
vcounderrange <= <GND>
fbout <= <GND>
fref <= <GND>
icdrclk <= <GND>


|uart_bridge|pll:myPLL|altpll:altpll_component|pll_altpll:auto_generated
areset => pll1.ARESET
clk[0] <= pll1.CLK
clk[1] <= pll1.CLK1
clk[2] <= pll1.CLK2
clk[3] <= pll1.CLK3
clk[4] <= pll1.CLK4
inclk[0] => pll1.CLK
inclk[1] => pll1.CLK1


|uart_bridge|uart:DUT
clk => receiver:uart_recv.clk
clk => transmitter:uart_write.clk
rst_n => receiver:uart_recv.rst_n
rst_n => transmitter:uart_write.rst_n
rx_datastream => receiver:uart_recv.raw_rx_bitstream
tx_datastream <= transmitter:uart_write.tx_serial_out
tx_data_valid => transmitter:uart_write.tx_data_valid
tx_data[0] => transmitter:uart_write.tx_data[0]
tx_data[1] => transmitter:uart_write.tx_data[1]
tx_data[2] => transmitter:uart_write.tx_data[2]
tx_data[3] => transmitter:uart_write.tx_data[3]
tx_data[4] => transmitter:uart_write.tx_data[4]
tx_data[5] => transmitter:uart_write.tx_data[5]
tx_data[6] => transmitter:uart_write.tx_data[6]
tx_data[7] => transmitter:uart_write.tx_data[7]
tx_data_ready <= transmitter:uart_write.tx_data_ready
rx_data_ready => receiver:uart_recv.host_ready
rx_framing_err_clr => receiver:uart_recv.clear_framing_err
rx_data_valid <= receiver:uart_recv.rx_data_valid
rx_data[0] <= receiver:uart_recv.rx_data[0]
rx_data[1] <= receiver:uart_recv.rx_data[1]
rx_data[2] <= receiver:uart_recv.rx_data[2]
rx_data[3] <= receiver:uart_recv.rx_data[3]
rx_data[4] <= receiver:uart_recv.rx_data[4]
rx_data[5] <= receiver:uart_recv.rx_data[5]
rx_data[6] <= receiver:uart_recv.rx_data[6]
rx_data[7] <= receiver:uart_recv.rx_data[7]
rx_overrun <= receiver:uart_recv.overrun
rx_framing_err <= receiver:uart_recv.framing_err


|uart_bridge|uart:DUT|receiver:uart_recv
clk => clk.IN1
rst_n => rst_n.IN1
raw_rx_bitstream => raw_rx_bitstream.IN1
host_ready => always1.IN1
host_ready => always1.IN1
host_ready => always1.IN1
host_ready => always1.IN1
host_ready => always1.IN1
host_ready => always2.IN1
host_ready => Selector1.IN12
host_ready => always1.IN1
host_ready => always1.IN1
host_ready => always1.IN1
host_ready => always1.IN1
clear_framing_err => framing_err.OUTPUTSELECT
rx_data[0] <= rx_data[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[1] <= rx_data[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[2] <= rx_data[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[3] <= rx_data[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[4] <= rx_data[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[5] <= rx_data[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[6] <= rx_data[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[7] <= rx_data[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data_valid <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
framing_err <= framing_err~reg0.DB_MAX_OUTPUT_PORT_TYPE
overrun <= Equal7.DB_MAX_OUTPUT_PORT_TYPE


|uart_bridge|uart:DUT|receiver:uart_recv|bit_synchronizer:rx_sync
clk => buffer_chain[0].CLK
clk => buffer_chain[1].CLK
clk => buffer_chain[2].CLK
rst_n => buffer_chain[0].PRESET
rst_n => buffer_chain[1].PRESET
rst_n => buffer_chain[2].PRESET
data_in => buffer_chain[0].DATAIN
data_out <= buffer_chain[2].DB_MAX_OUTPUT_PORT_TYPE


|uart_bridge|uart:DUT|receiver:uart_recv|bit_detector:rx_core
clk => counter:timing_cntr.clk
clk => counter:bit_cntr.clk
clk => did_sample.CLK
clk => last_logic_level.CLK
clk => rx_bit~reg0.CLK
clk => cs[0].CLK
clk => cs[1].CLK
clk => cs[2].CLK
clk => cs[3].CLK
clk => cs[4].CLK
clk => cs[5].CLK
clk => cs[6].CLK
clk => cs[7].CLK
clk => cs[8].CLK
clk => cs[9].CLK
clk => cs[10].CLK
clk => cs[11].CLK
clk => cs[12].CLK
clk => cs[13].CLK
clk => cs[14].CLK
clk => cs[15].CLK
clk => cs[16].CLK
clk => cs[17].CLK
clk => cs[18].CLK
clk => cs[19].CLK
clk => cs[20].CLK
clk => cs[21].CLK
clk => cs[22].CLK
clk => cs[23].CLK
clk => cs[24].CLK
clk => cs[25].CLK
clk => cs[26].CLK
clk => cs[27].CLK
clk => cs[28].CLK
clk => cs[29].CLK
clk => cs[30].CLK
clk => cs[31].CLK
rst_n => counter:timing_cntr.rst_n
rst_n => counter:bit_cntr.rst_n
rst_n => rx_bit.OUTPUTSELECT
rst_n => last_logic_level.OUTPUTSELECT
rst_n => did_sample.OUTPUTSELECT
rst_n => cs.OUTPUTSELECT
rst_n => cs.OUTPUTSELECT
rst_n => cs.OUTPUTSELECT
bitstream_in => rx_bit.DATAB
bitstream_in => resync.IN1
bitstream_in => last_logic_level.DATAB
bitstream_in => Selector2.IN1
active_rx <= active_rx.DB_MAX_OUTPUT_PORT_TYPE
bit_ready <= bit_ready.DB_MAX_OUTPUT_PORT_TYPE
rx_bit <= rx_bit~reg0.DB_MAX_OUTPUT_PORT_TYPE
framing_err <= framing_err.DB_MAX_OUTPUT_PORT_TYPE
done <= done.DB_MAX_OUTPUT_PORT_TYPE


|uart_bridge|uart:DUT|receiver:uart_recv|bit_detector:rx_core|counter:timing_cntr
clk => Q[0]~reg0.CLK
clk => Q[1]~reg0.CLK
clk => Q[2]~reg0.CLK
clk => Q[3]~reg0.CLK
rst_n => Q[0]~reg0.ACLR
rst_n => Q[1]~reg0.ACLR
rst_n => Q[2]~reg0.ACLR
rst_n => Q[3]~reg0.ACLR
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
D[0] => Q.DATAB
D[1] => Q.DATAB
D[2] => Q.DATAB
D[3] => Q.DATAB
Q[0] <= Q[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[1] <= Q[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[2] <= Q[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[3] <= Q[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|uart_bridge|uart:DUT|receiver:uart_recv|bit_detector:rx_core|counter:bit_cntr
clk => Q[0]~reg0.CLK
clk => Q[1]~reg0.CLK
clk => Q[2]~reg0.CLK
rst_n => Q[0]~reg0.ACLR
rst_n => Q[1]~reg0.ACLR
rst_n => Q[2]~reg0.ACLR
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
D[0] => Q.DATAB
D[1] => Q.DATAB
D[2] => Q.DATAB
Q[0] <= Q[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[1] <= Q[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[2] <= Q[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|uart_bridge|uart:DUT|transmitter:uart_write
clk => bit_shifter:shift_ctrl.clk
clk => shift_out[0].CLK
clk => shift_out[1].CLK
clk => shift_out[2].CLK
clk => shift_out[3].CLK
clk => shift_out[4].CLK
clk => shift_out[5].CLK
clk => shift_out[6].CLK
clk => shift_out[7].CLK
clk => shift_out[8].CLK
clk => shift_out[9].CLK
clk => latched_tx_data[0].CLK
clk => latched_tx_data[1].CLK
clk => latched_tx_data[2].CLK
clk => latched_tx_data[3].CLK
clk => latched_tx_data[4].CLK
clk => latched_tx_data[5].CLK
clk => latched_tx_data[6].CLK
clk => latched_tx_data[7].CLK
clk => cs[0].CLK
clk => cs[1].CLK
clk => cs[2].CLK
clk => cs[3].CLK
clk => cs[4].CLK
clk => cs[5].CLK
clk => cs[6].CLK
clk => cs[7].CLK
clk => cs[8].CLK
clk => cs[9].CLK
clk => cs[10].CLK
clk => cs[11].CLK
clk => cs[12].CLK
clk => cs[13].CLK
clk => cs[14].CLK
clk => cs[15].CLK
clk => cs[16].CLK
clk => cs[17].CLK
clk => cs[18].CLK
clk => cs[19].CLK
clk => cs[20].CLK
clk => cs[21].CLK
clk => cs[22].CLK
clk => cs[23].CLK
clk => cs[24].CLK
clk => cs[25].CLK
clk => cs[26].CLK
clk => cs[27].CLK
clk => cs[28].CLK
clk => cs[29].CLK
clk => cs[30].CLK
clk => cs[31].CLK
rst_n => bit_shifter:shift_ctrl.rst_n
rst_n => latched_tx_data.OUTPUTSELECT
rst_n => latched_tx_data.OUTPUTSELECT
rst_n => latched_tx_data.OUTPUTSELECT
rst_n => latched_tx_data.OUTPUTSELECT
rst_n => latched_tx_data.OUTPUTSELECT
rst_n => latched_tx_data.OUTPUTSELECT
rst_n => latched_tx_data.OUTPUTSELECT
rst_n => latched_tx_data.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => cs.OUTPUTSELECT
rst_n => cs.OUTPUTSELECT
tx_data_valid => always1.IN1
tx_data_valid => Selector1.IN6
tx_data_valid => Selector1.IN7
tx_data_valid => always1.IN1
tx_data_valid => always1.IN1
tx_data[0] => latched_tx_data.DATAB
tx_data[1] => latched_tx_data.DATAB
tx_data[2] => latched_tx_data.DATAB
tx_data[3] => latched_tx_data.DATAB
tx_data[4] => latched_tx_data.DATAB
tx_data[5] => latched_tx_data.DATAB
tx_data[6] => latched_tx_data.DATAB
tx_data[7] => latched_tx_data.DATAB
tx_data_ready <= tx_data_ready.DB_MAX_OUTPUT_PORT_TYPE
tx_serial_out <= tx_serial_out.DB_MAX_OUTPUT_PORT_TYPE


|uart_bridge|uart:DUT|transmitter:uart_write|bit_shifter:shift_ctrl
clk => counter:xmit_divider.clk
clk => counter:shifted_counter.clk
rst_n => counter:xmit_divider.rst_n
rst_n => counter:shifted_counter.rst_n
do_tx => counter:xmit_divider.en
do_tx => always0.IN1
do_tx => always0.IN1
last_bit_tx <= always0.DB_MAX_OUTPUT_PORT_TYPE
do_shift <= always0.DB_MAX_OUTPUT_PORT_TYPE


|uart_bridge|uart:DUT|transmitter:uart_write|bit_shifter:shift_ctrl|counter:xmit_divider
clk => Q[0]~reg0.CLK
clk => Q[1]~reg0.CLK
clk => Q[2]~reg0.CLK
clk => Q[3]~reg0.CLK
rst_n => Q[0]~reg0.ACLR
rst_n => Q[1]~reg0.ACLR
rst_n => Q[2]~reg0.ACLR
rst_n => Q[3]~reg0.ACLR
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
D[0] => Q.DATAB
D[1] => Q.DATAB
D[2] => Q.DATAB
D[3] => Q.DATAB
Q[0] <= Q[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[1] <= Q[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[2] <= Q[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[3] <= Q[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|uart_bridge|uart:DUT|transmitter:uart_write|bit_shifter:shift_ctrl|counter:shifted_counter
clk => Q[0]~reg0.CLK
clk => Q[1]~reg0.CLK
clk => Q[2]~reg0.CLK
clk => Q[3]~reg0.CLK
rst_n => Q[0]~reg0.ACLR
rst_n => Q[1]~reg0.ACLR
rst_n => Q[2]~reg0.ACLR
rst_n => Q[3]~reg0.ACLR
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
D[0] => Q.DATAB
D[1] => Q.DATAB
D[2] => Q.DATAB
D[3] => Q.DATAB
Q[0] <= Q[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[1] <= Q[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[2] <= Q[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[3] <= Q[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE


