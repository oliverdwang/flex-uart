|uart_bridge
CLOCK_50 => CLOCK_50.IN1
KEY[0] => key_sync[0].DATAIN
KEY[1] => key_sync[1].DATAIN
KEY[2] => ~NO_FANOUT~
KEY[3] => ~NO_FANOUT~
SW[0] => SW[0].IN1
SW[1] => ~NO_FANOUT~
SW[2] => ~NO_FANOUT~
SW[3] => ~NO_FANOUT~
SW[4] => ~NO_FANOUT~
SW[5] => ~NO_FANOUT~
SW[6] => ~NO_FANOUT~
SW[7] => ~NO_FANOUT~
SW[8] => ~NO_FANOUT~
SW[9] => ~NO_FANOUT~
GPIO_1[0] <> <UNC>
GPIO_1[2] <> <UNC>
GPIO_1[3] <> <UNC>
GPIO_1[4] <> <UNC>
GPIO_1[5] <> <UNC>
GPIO_1[6] <> <UNC>
GPIO_1[7] <> <UNC>
GPIO_1[8] <> <UNC>
GPIO_1[9] <> <UNC>
GPIO_1[10] <> <UNC>
GPIO_1[11] <> <UNC>
GPIO_1[12] <> <UNC>
GPIO_1[13] <> <UNC>
GPIO_1[14] <> <UNC>
GPIO_1[15] <> <UNC>
GPIO_1[16] <> <UNC>
GPIO_1[17] <> <UNC>
GPIO_1[18] <> <UNC>
GPIO_1[19] <> <UNC>
GPIO_1[20] <> <UNC>
GPIO_1[21] <> <UNC>
GPIO_1[22] <> <UNC>
GPIO_1[23] <> <UNC>
GPIO_1[24] <> <UNC>
GPIO_1[25] <> <UNC>
GPIO_1[26] <> <UNC>
GPIO_1[27] <> <UNC>
GPIO_1[28] <> <UNC>
GPIO_1[29] <> <UNC>
GPIO_1[30] <> <UNC>
GPIO_1[31] <> <UNC>
GPIO_1[32] <> <UNC>
GPIO_1[33] <> <UNC>
GPIO_1[34] <> <UNC>
GPIO_1[35] <> GPIO_1[35]
LEDR[0] <= uart:DUT.rx_overrun
LEDR[1] <= uart:DUT.rx_framing_err
LEDR[2] <= pll:myPLL.locked
LEDR[3] <= <VCC>
LEDR[4] <= <GND>
LEDR[5] <= <GND>
LEDR[6] <= <GND>
LEDR[7] <= <GND>
LEDR[8] <= <GND>
LEDR[9] <= <GND>


|uart_bridge|pll:myPLL
refclk => refclk.IN1
rst => rst.IN1
outclk_0 <= pll_0002:pll_inst.outclk_0
locked <= pll_0002:pll_inst.locked


|uart_bridge|pll:myPLL|pll_0002:pll_inst
refclk => refclk.IN1
rst => rst.IN1
outclk_0 <= altera_pll:altera_pll_i.outclk
locked <= altera_pll:altera_pll_i.locked


|uart_bridge|pll:myPLL|pll_0002:pll_inst|altera_pll:altera_pll_i
refclk => general[0].gpll.I_REFCLK
refclk1 => ~NO_FANOUT~
fbclk => ~NO_FANOUT~
rst => general[0].gpll.I_RST
phase_en => ~NO_FANOUT~
updn => ~NO_FANOUT~
num_phase_shifts[0] => ~NO_FANOUT~
num_phase_shifts[1] => ~NO_FANOUT~
num_phase_shifts[2] => ~NO_FANOUT~
scanclk => ~NO_FANOUT~
cntsel[0] => ~NO_FANOUT~
cntsel[1] => ~NO_FANOUT~
cntsel[2] => ~NO_FANOUT~
cntsel[3] => ~NO_FANOUT~
cntsel[4] => ~NO_FANOUT~
reconfig_to_pll[0] => ~NO_FANOUT~
reconfig_to_pll[1] => ~NO_FANOUT~
reconfig_to_pll[2] => ~NO_FANOUT~
reconfig_to_pll[3] => ~NO_FANOUT~
reconfig_to_pll[4] => ~NO_FANOUT~
reconfig_to_pll[5] => ~NO_FANOUT~
reconfig_to_pll[6] => ~NO_FANOUT~
reconfig_to_pll[7] => ~NO_FANOUT~
reconfig_to_pll[8] => ~NO_FANOUT~
reconfig_to_pll[9] => ~NO_FANOUT~
reconfig_to_pll[10] => ~NO_FANOUT~
reconfig_to_pll[11] => ~NO_FANOUT~
reconfig_to_pll[12] => ~NO_FANOUT~
reconfig_to_pll[13] => ~NO_FANOUT~
reconfig_to_pll[14] => ~NO_FANOUT~
reconfig_to_pll[15] => ~NO_FANOUT~
reconfig_to_pll[16] => ~NO_FANOUT~
reconfig_to_pll[17] => ~NO_FANOUT~
reconfig_to_pll[18] => ~NO_FANOUT~
reconfig_to_pll[19] => ~NO_FANOUT~
reconfig_to_pll[20] => ~NO_FANOUT~
reconfig_to_pll[21] => ~NO_FANOUT~
reconfig_to_pll[22] => ~NO_FANOUT~
reconfig_to_pll[23] => ~NO_FANOUT~
reconfig_to_pll[24] => ~NO_FANOUT~
reconfig_to_pll[25] => ~NO_FANOUT~
reconfig_to_pll[26] => ~NO_FANOUT~
reconfig_to_pll[27] => ~NO_FANOUT~
reconfig_to_pll[28] => ~NO_FANOUT~
reconfig_to_pll[29] => ~NO_FANOUT~
reconfig_to_pll[30] => ~NO_FANOUT~
reconfig_to_pll[31] => ~NO_FANOUT~
reconfig_to_pll[32] => ~NO_FANOUT~
reconfig_to_pll[33] => ~NO_FANOUT~
reconfig_to_pll[34] => ~NO_FANOUT~
reconfig_to_pll[35] => ~NO_FANOUT~
reconfig_to_pll[36] => ~NO_FANOUT~
reconfig_to_pll[37] => ~NO_FANOUT~
reconfig_to_pll[38] => ~NO_FANOUT~
reconfig_to_pll[39] => ~NO_FANOUT~
reconfig_to_pll[40] => ~NO_FANOUT~
reconfig_to_pll[41] => ~NO_FANOUT~
reconfig_to_pll[42] => ~NO_FANOUT~
reconfig_to_pll[43] => ~NO_FANOUT~
reconfig_to_pll[44] => ~NO_FANOUT~
reconfig_to_pll[45] => ~NO_FANOUT~
reconfig_to_pll[46] => ~NO_FANOUT~
reconfig_to_pll[47] => ~NO_FANOUT~
reconfig_to_pll[48] => ~NO_FANOUT~
reconfig_to_pll[49] => ~NO_FANOUT~
reconfig_to_pll[50] => ~NO_FANOUT~
reconfig_to_pll[51] => ~NO_FANOUT~
reconfig_to_pll[52] => ~NO_FANOUT~
reconfig_to_pll[53] => ~NO_FANOUT~
reconfig_to_pll[54] => ~NO_FANOUT~
reconfig_to_pll[55] => ~NO_FANOUT~
reconfig_to_pll[56] => ~NO_FANOUT~
reconfig_to_pll[57] => ~NO_FANOUT~
reconfig_to_pll[58] => ~NO_FANOUT~
reconfig_to_pll[59] => ~NO_FANOUT~
reconfig_to_pll[60] => ~NO_FANOUT~
reconfig_to_pll[61] => ~NO_FANOUT~
reconfig_to_pll[62] => ~NO_FANOUT~
reconfig_to_pll[63] => ~NO_FANOUT~
extswitch => ~NO_FANOUT~
adjpllin => ~NO_FANOUT~
cclk => ~NO_FANOUT~
outclk[0] <= general[0].gpll.O_OUTCLK
fboutclk <= general[0].gpll.O_FBOUTCLK
locked <= general[0].gpll.LOCKED
phase_done <= <GND>
reconfig_from_pll[0] <= <GND>
reconfig_from_pll[1] <= <GND>
reconfig_from_pll[2] <= <GND>
reconfig_from_pll[3] <= <GND>
reconfig_from_pll[4] <= <GND>
reconfig_from_pll[5] <= <GND>
reconfig_from_pll[6] <= <GND>
reconfig_from_pll[7] <= <GND>
reconfig_from_pll[8] <= <GND>
reconfig_from_pll[9] <= <GND>
reconfig_from_pll[10] <= <GND>
reconfig_from_pll[11] <= <GND>
reconfig_from_pll[12] <= <GND>
reconfig_from_pll[13] <= <GND>
reconfig_from_pll[14] <= <GND>
reconfig_from_pll[15] <= <GND>
reconfig_from_pll[16] <= <GND>
reconfig_from_pll[17] <= <GND>
reconfig_from_pll[18] <= <GND>
reconfig_from_pll[19] <= <GND>
reconfig_from_pll[20] <= <GND>
reconfig_from_pll[21] <= <GND>
reconfig_from_pll[22] <= <GND>
reconfig_from_pll[23] <= <GND>
reconfig_from_pll[24] <= <GND>
reconfig_from_pll[25] <= <GND>
reconfig_from_pll[26] <= <GND>
reconfig_from_pll[27] <= <GND>
reconfig_from_pll[28] <= <GND>
reconfig_from_pll[29] <= <GND>
reconfig_from_pll[30] <= <GND>
reconfig_from_pll[31] <= <GND>
reconfig_from_pll[32] <= <GND>
reconfig_from_pll[33] <= <GND>
reconfig_from_pll[34] <= <GND>
reconfig_from_pll[35] <= <GND>
reconfig_from_pll[36] <= <GND>
reconfig_from_pll[37] <= <GND>
reconfig_from_pll[38] <= <GND>
reconfig_from_pll[39] <= <GND>
reconfig_from_pll[40] <= <GND>
reconfig_from_pll[41] <= <GND>
reconfig_from_pll[42] <= <GND>
reconfig_from_pll[43] <= <GND>
reconfig_from_pll[44] <= <GND>
reconfig_from_pll[45] <= <GND>
reconfig_from_pll[46] <= <GND>
reconfig_from_pll[47] <= <GND>
reconfig_from_pll[48] <= <GND>
reconfig_from_pll[49] <= <GND>
reconfig_from_pll[50] <= <GND>
reconfig_from_pll[51] <= <GND>
reconfig_from_pll[52] <= <GND>
reconfig_from_pll[53] <= <GND>
reconfig_from_pll[54] <= <GND>
reconfig_from_pll[55] <= <GND>
reconfig_from_pll[56] <= <GND>
reconfig_from_pll[57] <= <GND>
reconfig_from_pll[58] <= <GND>
reconfig_from_pll[59] <= <GND>
reconfig_from_pll[60] <= <GND>
reconfig_from_pll[61] <= <GND>
reconfig_from_pll[62] <= <GND>
reconfig_from_pll[63] <= <GND>
activeclk <= <GND>
clkbad[0] <= <GND>
clkbad[1] <= <GND>
phout[0] <= <GND>
phout[1] <= <GND>
phout[2] <= <GND>
phout[3] <= <GND>
phout[4] <= <GND>
phout[5] <= <GND>
phout[6] <= <GND>
phout[7] <= <GND>
lvds_clk[0] <= <GND>
lvds_clk[1] <= <GND>
loaden[0] <= <GND>
loaden[1] <= <GND>
extclk_out[0] <= <GND>
extclk_out[1] <= <GND>
cascade_out[0] <= <GND>
zdbfbclk <> <GND>


|uart_bridge|uart:DUT
clk => receiver:uart_recv.clk
clk => transmitter:uart_write.clk
rst_n => receiver:uart_recv.rst_n
rst_n => transmitter:uart_write.rst_n
rx_datastream => receiver:uart_recv.raw_rx_bitstream
tx_datastream <= transmitter:uart_write.tx_serial_out
tx_data_valid => transmitter:uart_write.tx_data_valid
tx_data[0] => transmitter:uart_write.tx_data[0]
tx_data[1] => transmitter:uart_write.tx_data[1]
tx_data[2] => transmitter:uart_write.tx_data[2]
tx_data[3] => transmitter:uart_write.tx_data[3]
tx_data[4] => transmitter:uart_write.tx_data[4]
tx_data[5] => transmitter:uart_write.tx_data[5]
tx_data[6] => transmitter:uart_write.tx_data[6]
tx_data[7] => transmitter:uart_write.tx_data[7]
tx_data_ready <= transmitter:uart_write.tx_data_ready
rx_data_ready => receiver:uart_recv.host_ready
rx_framing_err_clr => receiver:uart_recv.clear_framing_err
rx_data_valid <= receiver:uart_recv.rx_data_valid
rx_data[0] <= receiver:uart_recv.rx_data[0]
rx_data[1] <= receiver:uart_recv.rx_data[1]
rx_data[2] <= receiver:uart_recv.rx_data[2]
rx_data[3] <= receiver:uart_recv.rx_data[3]
rx_data[4] <= receiver:uart_recv.rx_data[4]
rx_data[5] <= receiver:uart_recv.rx_data[5]
rx_data[6] <= receiver:uart_recv.rx_data[6]
rx_data[7] <= receiver:uart_recv.rx_data[7]
rx_overrun <= receiver:uart_recv.overrun
rx_framing_err <= receiver:uart_recv.framing_err


|uart_bridge|uart:DUT|receiver:uart_recv
clk => clk.IN1
rst_n => rst_n.IN1
raw_rx_bitstream => raw_rx_bitstream.IN1
host_ready => always1.IN1
host_ready => always1.IN1
host_ready => always1.IN1
host_ready => always1.IN1
host_ready => always1.IN1
host_ready => always2.IN1
host_ready => Selector1.IN12
host_ready => always1.IN1
host_ready => always1.IN1
host_ready => always1.IN1
host_ready => always1.IN1
clear_framing_err => framing_err.OUTPUTSELECT
rx_data[0] <= rx_data[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[1] <= rx_data[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[2] <= rx_data[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[3] <= rx_data[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[4] <= rx_data[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[5] <= rx_data[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[6] <= rx_data[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[7] <= rx_data[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data_valid <= WideOr2.DB_MAX_OUTPUT_PORT_TYPE
framing_err <= framing_err~reg0.DB_MAX_OUTPUT_PORT_TYPE
overrun <= Equal7.DB_MAX_OUTPUT_PORT_TYPE


|uart_bridge|uart:DUT|receiver:uart_recv|bit_synchronizer:rx_sync
clk => buffer_chain[0].CLK
clk => buffer_chain[1].CLK
clk => buffer_chain[2].CLK
rst_n => buffer_chain[0].PRESET
rst_n => buffer_chain[1].PRESET
rst_n => buffer_chain[2].PRESET
data_in => buffer_chain[0].DATAIN
data_out <= buffer_chain[2].DB_MAX_OUTPUT_PORT_TYPE


|uart_bridge|uart:DUT|receiver:uart_recv|bit_detector:rx_core
clk => counter:timing_cntr.clk
clk => counter:bit_cntr.clk
clk => did_sample.CLK
clk => last_logic_level.CLK
clk => rx_bit~reg0.CLK
clk => cs[0].CLK
clk => cs[1].CLK
clk => cs[2].CLK
clk => cs[3].CLK
clk => cs[4].CLK
clk => cs[5].CLK
clk => cs[6].CLK
clk => cs[7].CLK
clk => cs[8].CLK
clk => cs[9].CLK
clk => cs[10].CLK
clk => cs[11].CLK
clk => cs[12].CLK
clk => cs[13].CLK
clk => cs[14].CLK
clk => cs[15].CLK
clk => cs[16].CLK
clk => cs[17].CLK
clk => cs[18].CLK
clk => cs[19].CLK
clk => cs[20].CLK
clk => cs[21].CLK
clk => cs[22].CLK
clk => cs[23].CLK
clk => cs[24].CLK
clk => cs[25].CLK
clk => cs[26].CLK
clk => cs[27].CLK
clk => cs[28].CLK
clk => cs[29].CLK
clk => cs[30].CLK
clk => cs[31].CLK
rst_n => counter:timing_cntr.rst_n
rst_n => counter:bit_cntr.rst_n
rst_n => rx_bit.OUTPUTSELECT
rst_n => last_logic_level.OUTPUTSELECT
rst_n => did_sample.OUTPUTSELECT
rst_n => cs.OUTPUTSELECT
rst_n => cs.OUTPUTSELECT
rst_n => cs.OUTPUTSELECT
bitstream_in => rx_bit.DATAB
bitstream_in => resync.IN1
bitstream_in => last_logic_level.DATAB
bitstream_in => Selector2.IN1
active_rx <= active_rx.DB_MAX_OUTPUT_PORT_TYPE
bit_ready <= bit_ready.DB_MAX_OUTPUT_PORT_TYPE
rx_bit <= rx_bit~reg0.DB_MAX_OUTPUT_PORT_TYPE
framing_err <= framing_err.DB_MAX_OUTPUT_PORT_TYPE
done <= done.DB_MAX_OUTPUT_PORT_TYPE


|uart_bridge|uart:DUT|receiver:uart_recv|bit_detector:rx_core|counter:timing_cntr
clk => Q[0]~reg0.CLK
clk => Q[1]~reg0.CLK
clk => Q[2]~reg0.CLK
clk => Q[3]~reg0.CLK
rst_n => Q[0]~reg0.ACLR
rst_n => Q[1]~reg0.ACLR
rst_n => Q[2]~reg0.ACLR
rst_n => Q[3]~reg0.ACLR
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
D[0] => Q.DATAB
D[1] => Q.DATAB
D[2] => Q.DATAB
D[3] => Q.DATAB
Q[0] <= Q[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[1] <= Q[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[2] <= Q[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[3] <= Q[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|uart_bridge|uart:DUT|receiver:uart_recv|bit_detector:rx_core|counter:bit_cntr
clk => Q[0]~reg0.CLK
clk => Q[1]~reg0.CLK
clk => Q[2]~reg0.CLK
rst_n => Q[0]~reg0.ACLR
rst_n => Q[1]~reg0.ACLR
rst_n => Q[2]~reg0.ACLR
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
D[0] => Q.DATAB
D[1] => Q.DATAB
D[2] => Q.DATAB
Q[0] <= Q[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[1] <= Q[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[2] <= Q[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|uart_bridge|uart:DUT|transmitter:uart_write
clk => bit_shifter:shift_ctrl.clk
clk => shift_out[0].CLK
clk => shift_out[1].CLK
clk => shift_out[2].CLK
clk => shift_out[3].CLK
clk => shift_out[4].CLK
clk => shift_out[5].CLK
clk => shift_out[6].CLK
clk => shift_out[7].CLK
clk => shift_out[8].CLK
clk => shift_out[9].CLK
clk => latched_tx_data[0].CLK
clk => latched_tx_data[1].CLK
clk => latched_tx_data[2].CLK
clk => latched_tx_data[3].CLK
clk => latched_tx_data[4].CLK
clk => latched_tx_data[5].CLK
clk => latched_tx_data[6].CLK
clk => latched_tx_data[7].CLK
clk => cs[0].CLK
clk => cs[1].CLK
clk => cs[2].CLK
clk => cs[3].CLK
clk => cs[4].CLK
clk => cs[5].CLK
clk => cs[6].CLK
clk => cs[7].CLK
clk => cs[8].CLK
clk => cs[9].CLK
clk => cs[10].CLK
clk => cs[11].CLK
clk => cs[12].CLK
clk => cs[13].CLK
clk => cs[14].CLK
clk => cs[15].CLK
clk => cs[16].CLK
clk => cs[17].CLK
clk => cs[18].CLK
clk => cs[19].CLK
clk => cs[20].CLK
clk => cs[21].CLK
clk => cs[22].CLK
clk => cs[23].CLK
clk => cs[24].CLK
clk => cs[25].CLK
clk => cs[26].CLK
clk => cs[27].CLK
clk => cs[28].CLK
clk => cs[29].CLK
clk => cs[30].CLK
clk => cs[31].CLK
rst_n => bit_shifter:shift_ctrl.rst_n
rst_n => latched_tx_data.OUTPUTSELECT
rst_n => latched_tx_data.OUTPUTSELECT
rst_n => latched_tx_data.OUTPUTSELECT
rst_n => latched_tx_data.OUTPUTSELECT
rst_n => latched_tx_data.OUTPUTSELECT
rst_n => latched_tx_data.OUTPUTSELECT
rst_n => latched_tx_data.OUTPUTSELECT
rst_n => latched_tx_data.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => shift_out.OUTPUTSELECT
rst_n => cs.OUTPUTSELECT
rst_n => cs.OUTPUTSELECT
tx_data_valid => always1.IN1
tx_data_valid => Selector1.IN6
tx_data_valid => Selector1.IN7
tx_data_valid => always1.IN1
tx_data_valid => always1.IN1
tx_data[0] => latched_tx_data.DATAB
tx_data[1] => latched_tx_data.DATAB
tx_data[2] => latched_tx_data.DATAB
tx_data[3] => latched_tx_data.DATAB
tx_data[4] => latched_tx_data.DATAB
tx_data[5] => latched_tx_data.DATAB
tx_data[6] => latched_tx_data.DATAB
tx_data[7] => latched_tx_data.DATAB
tx_data_ready <= tx_data_ready.DB_MAX_OUTPUT_PORT_TYPE
tx_serial_out <= tx_serial_out.DB_MAX_OUTPUT_PORT_TYPE


|uart_bridge|uart:DUT|transmitter:uart_write|bit_shifter:shift_ctrl
clk => counter:xmit_divider.clk
clk => counter:shifted_counter.clk
rst_n => counter:xmit_divider.rst_n
rst_n => counter:shifted_counter.rst_n
do_tx => counter:xmit_divider.en
do_tx => always0.IN1
do_tx => always0.IN1
last_bit_tx <= always0.DB_MAX_OUTPUT_PORT_TYPE
do_shift <= always0.DB_MAX_OUTPUT_PORT_TYPE


|uart_bridge|uart:DUT|transmitter:uart_write|bit_shifter:shift_ctrl|counter:xmit_divider
clk => Q[0]~reg0.CLK
clk => Q[1]~reg0.CLK
clk => Q[2]~reg0.CLK
clk => Q[3]~reg0.CLK
rst_n => Q[0]~reg0.ACLR
rst_n => Q[1]~reg0.ACLR
rst_n => Q[2]~reg0.ACLR
rst_n => Q[3]~reg0.ACLR
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
D[0] => Q.DATAB
D[1] => Q.DATAB
D[2] => Q.DATAB
D[3] => Q.DATAB
Q[0] <= Q[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[1] <= Q[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[2] <= Q[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[3] <= Q[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|uart_bridge|uart:DUT|transmitter:uart_write|bit_shifter:shift_ctrl|counter:shifted_counter
clk => Q[0]~reg0.CLK
clk => Q[1]~reg0.CLK
clk => Q[2]~reg0.CLK
clk => Q[3]~reg0.CLK
rst_n => Q[0]~reg0.ACLR
rst_n => Q[1]~reg0.ACLR
rst_n => Q[2]~reg0.ACLR
rst_n => Q[3]~reg0.ACLR
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
load => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
en => Q.OUTPUTSELECT
D[0] => Q.DATAB
D[1] => Q.DATAB
D[2] => Q.DATAB
D[3] => Q.DATAB
Q[0] <= Q[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[1] <= Q[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[2] <= Q[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
Q[3] <= Q[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE


